{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport utils from \"@/utils/utils\";\nimport AdminSideBar from \"@/components/AdminSideBar.vue\";\nexport default {\n  name: \"CategoryView\",\n  components: {\n    AdminSideBar\n  },\n  data: () => ({\n    localDomain: utils.constant.localDomain,\n    createFoodForm: false,\n    dialog: false,\n    update_dialog: false,\n    delete_dialog: false,\n    loading: false,\n    errorAlert: false,\n    poster: null,\n    posterPreviewPath: null,\n    deleteDemo: {},\n    updateDemo: {},\n    createDemo: {\n      foodName: \"\",\n      foodCategory: 1,\n      foodPrice: 0,\n      foodPhoto: null,\n      isAvaliable: true\n    },\n    categoryList: [],\n    foodList: [],\n    headers: [{\n      text: \"No.\",\n      align: \"start\",\n      sortable: false,\n      value: \"foodId\"\n    }, {\n      text: \"Name\",\n      value: \"foodName\"\n    }, {\n      text: \"Category\",\n      value: \"foodCategory.categoryName\"\n    }, {\n      text: \"Price(Ks)\",\n      value: \"foodPrice\"\n    }, {\n      text: \"Created Time\",\n      value: \"createdAt\"\n    }, {\n      text: \"Modified Time\",\n      value: \"updatedAt\"\n    }, {\n      text: \"Actions\",\n      value: \"actions\",\n      sortable: false\n    }]\n  }),\n  async created() {\n    await this.fetchAllCategories();\n    await this.fetchAllFoods();\n  },\n  methods: {\n    // <!-- -------------****** get all category from utils.http ******-------------------------- -->\n    async fetchAllCategories() {\n      const response = await utils.http.get(\"/category/list\");\n      if (response) {\n        const data = await response.json();\n        if (data) this.categoryList = data;\n      }\n    },\n    // <!-- -------------****** get all food from utils.http ******-------------------------- -->\n    async fetchAllFoods() {\n      const response = await utils.http.get(\"/food/list\");\n      if (response) {\n        const data = await response.json();\n        if (data) this.foodList = data;\n      }\n    },\n    // <!-- -------------****** save Category from utils.http ******-------------------------- -->\n\n    async save() {\n      if (this.$refs.createFoodForm.validate()) {\n        this.errorAlert = false;\n        const respPoster = await utils.http.postMedia(\"/admin/file/create\", this.poster, this.poster.type);\n        let respPosterData = null;\n        if (respPoster.status === 200) {\n          respPosterData = await respPoster.text();\n          //console.log(this.respPosterData);\n        } else {\n          this.errorAlert = true;\n        }\n        if (respPosterData) {\n          // Create Food utils.http\n          const resp = await utils.http.post(\"/admin/food/create\", {\n            foodName: this.createDemo.foodName,\n            foodPrice: this.createDemo.foodPrice,\n            foodCategory: {\n              foodId: this.createDemo.foodCategory\n            },\n            isAvaliable: this.createDemo.isAvaliable,\n            foodPhoto: respPosterData\n          });\n          console.log(this.createDemo.foodName);\n          console.log(this.createDemo.foodPrice);\n          console.log(this.createDemo.foodCategory);\n          console.log(this.createDemo.isAvaliable);\n          console.log(respPosterData);\n          if (resp) {\n            await this.fetchAllFoods();\n            this.dialog = false;\n            this.createDemo = {};\n            this.poster = null;\n            this.posterPreviewPath = null;\n          }\n          if (resp && resp.status === 200) {\n            this.$router.push({\n              path: \"/admin/food\"\n            });\n          }\n        }\n        this.loading = false;\n      }\n    },\n    // <!-- -------------****** update table from utils.http ******-------------------------- -->\n    async updateItemConfirm(id) {\n      this.errorAlert = false;\n      this.loading = true;\n      let foodPhoto = this.updateDemo.foodPhoto;\n      // Step 1 -> Update Poster\n      // Null -> Poster is not selected\n      if (this.updateDemo.poster != null) {\n        // Update Poster utils.http\n        const respPosterData = await utils.http.putMedia(\"/admin/file/update\", this.updateDemo.poster, this.updateDemo.poster.type, this.updateDemo.foodPhoto);\n        if (respPosterData && respPosterData.status === 200) {\n          foodPhoto = await respPosterData.text();\n        } else {\n          console.debug(\"Poster Update Failed\");\n        }\n      }\n      const resp = await utils.http.put(\"/admin/food/update/\" + id, {\n        foodName: this.updateDemo.foodName,\n        foodPrice: this.updateDemo.foodPrice,\n        foodCategory: this.updateDemo.foodCategory.categoryName,\n        isAvaliable: this.updateDemo.isAvaliable,\n        foodPhoto: foodPhoto\n      });\n      if (resp && resp.status === 200) {\n        this.update_dialog = false;\n        await this.fetchAllFoods();\n      } else {\n        this.errorAlert = true;\n      }\n      this.loading = false;\n    },\n    // <!-- -------------****** delete table from utils.http ******-------------------------- -->\n    async deleteItemConfirm(id) {\n      const resp = await utils.http.del(\"/admin/food/delete/\" + id);\n      if (resp.status == 200) {\n        await this.fetchAllFoods();\n        this.delete_dialog = false;\n      }\n    },\n    // <!-- -------------******  event handelar from dialog ******-------------------------- -->\n    onChangePoster(poster) {\n      this.posterPreviewPath = URL.createObjectURL(poster);\n    },\n    deleteItem(item) {\n      this.delete_dialog = true;\n      this.deleteDemo = item;\n    },\n    editItem(item) {\n      this.update_dialog = true;\n      // Copy Object\n      this.updateDemo = Object.assign({}, item);\n      this.foodName = this.updateDemo.foodName;\n      this.foodPrice = this.updateDemo.foodPrice;\n      this.foodCategory = this.updateDemo.foodCategory.categoryName;\n      this.isAvaliable = this.updateDemo.isAvaliable;\n      this.foodPhoto = this.updateDemo.foodPhoto;\n      this.poster = this.updateDemo.poster;\n      this.posterPreviewPath = this.updateDemo.posterPreviewPath;\n    },\n    closeUpdate() {\n      this.update_dialog = false;\n    },\n    closeDelete() {\n      this.delete_dialog = false;\n    },\n    saveCancel() {\n      this.dialog = false;\n      this.createDemo = {};\n      this.poster = null;\n      this.posterPreviewPath = null;\n    }\n  }\n};","map":{"version":3,"mappings":";AA0PA;AACA;AACA;EACAA;EACAC;IACAC;EACA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IACAC;IACAC;IACAC,UACA;MACAC;MACAC;MACAC;MACAC;IACA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;MAAAD;IAAA;EAEA;EAEA;IACA;IACA;EACA;EACAE;IACA;IACA;MACA;MACA;QACA;QACA;MACA;IACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;IACA;IACA;;IAEA;MACA;QACA;QACA,8CACA,sBACA,aACA,iBACA;QACA;QAEA;UACAC;UACA;QACA;UACA;QACA;QACA;UACA;UACA;YACAb;YACAE;YACAD;cAAAa;YAAA;YACAV;YACAD;UACA;UACAY;UACAA;UACAA;UACAA;UACAA;UACA;YACA;YACA;YACA;YACA;YACA;UACA;UACA;YACA;cAAAC;YAAA;UACA;QACA;QACA;MACA;IACA;IACA;IACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA;QACA,iDACA,sBACA,wBACA,6BACA,0BACA;QAEA;UACAb;QACA;UACAY;QACA;MACA;MACA;QACAf;QACAE;QACAD;QACAG;QACAD;MACA;MACA;QACA;QACA;MACA;QACA;MACA;MAEA;IACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;IACA;IAEA;IACAc;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["name","components","AdminSideBar","data","localDomain","createFoodForm","dialog","update_dialog","delete_dialog","loading","errorAlert","poster","posterPreviewPath","deleteDemo","updateDemo","createDemo","foodName","foodCategory","foodPrice","foodPhoto","isAvaliable","categoryList","foodList","headers","text","align","sortable","value","methods","respPosterData","foodId","console","path","onChangePoster","deleteItem","editItem","closeUpdate","closeDelete","saveCancel"],"sourceRoot":"src/views","sources":["AdminView.vue"],"sourcesContent":["<template>\n  <div>\n    <AdminSideBar />\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"foodList\"\n      :items-per-page=\"10\"\n      class=\"elevation-1\"\n    >\n      <!-- Poster Img -->\n      <template v-slot:[`item.categoryPhoto`]=\"{ item }\">\n        <v-img\n          :src=\"localDomain + item.categoryPhoto\"\n          width=\"100\"\n          height=\"100\"\n          contain\n        ></v-img>\n      </template>\n      <template v-slot:top>\n        <v-toolbar flat>\n          <v-toolbar-title><strong>Food CRUD</strong></v-toolbar-title>\n          <v-divider class=\"mx-4\" inset vertical></v-divider>\n\n          <!-- -------------****** create dialog ******-------------------------- -->\n          <v-dialog v-model=\"dialog\" max-width=\"400px\">\n            <template v-slot:activator=\"{ on, attrs }\">\n              <v-btn color=\"primary\" dark class=\"mb-2\" v-bind=\"attrs\" v-on=\"on\">\n                Add Food\n              </v-btn>\n            </template>\n            <template\n              ><v-form ref=\"createFoodForm\" v-model=\"createFoodForm\">\n                <v-card>\n                  <v-card-title>\n                    <span class=\"text-h4\">Add New Food</span>\n                  </v-card-title>\n                  <v-card-text>\n                    <v-container>\n                      <v-row>\n                        <v-col cols=\"12\" sm=\"6\" md=\"6\">\n                          <v-text-field\n                            v-model=\"createDemo.foodName\"\n                            :rules=\"[\n                              (v) => !!v || 'Required',\n                              (v) =>\n                                (v && v.length <= 50) ||\n                                'Title must be less than 50 characters',\n                            ]\"\n                            label=\"Food Name\"\n                          ></v-text-field>\n                        </v-col>\n                        <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\n                          <!-- Category -->\n                          <v-select\n                            v-model=\"createDemo.foodCategory\"\n                            :items=\"categoryList\"\n                            item-text=\"categoryName\"\n                            item-value=\"categoryId\"\n                            :rules=\"[(v) => !!v || 'Required']\"\n                            label=\"Category\"\n                            required\n                          >\n                          </v-select>\n                        </v-col>\n                      </v-row>\n\n                      <v-row>\n                        <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\n                          <v-text-field\n                            v-model=\"createDemo.foodPrice\"\n                            type=\"number\"\n                            suffix=\"MMK\"\n                            max=\"999999\"\n                            min=\"1\"\n                            :rules=\"[\n                              (v) => !!v || 'Required',\n                              (v) =>\n                                (v && v > 0 && v <= 999999) ||\n                                'Buget must be between 0 and 999999 MMK',\n                            ]\"\n                            label=\"Price\"\n                            required\n                          ></v-text-field>\n                        </v-col>\n                        <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\n                          <!-- Adult -->\n                          <v-checkbox\n                            v-model=\"createDemo.isAvaliable\"\n                            label=\"Avaliable\"\n                          ></v-checkbox>\n                        </v-col>\n                      </v-row>\n                      <v-row>\n                        <v-col class=\"d-flex\" cols=\"12\" sm=\"12\">\n                          <!-- Poster -->\n                          <v-file-input\n                            v-model=\"poster\"\n                            label=\"Poster\"\n                            show-size\n                            prepend-icon=\"mdi-camera\"\n                            placeholder=\"Choose Poster Image\"\n                            accept=\"image/png, image/jpeg\"\n                            :rules=\"[\n                              (v) => !!v || 'Required',\n                              (v) =>\n                                !v ||\n                                v.size < 10000000 ||\n                                'Image size should be less than 10 MB!',\n                            ]\"\n                            @change=\"onChangePoster\"\n                          ></v-file-input>\n                        </v-col>\n                        <!-- Poster Preview -->\n                        <v-img\n                          v-if=\"posterPreviewPath != null\"\n                          :src=\"posterPreviewPath\"\n                          width=\"200\"\n                          height=\"150\"\n                          contain\n                        >\n                        </v-img\n                      ></v-row>\n                    </v-container>\n                  </v-card-text>\n                  <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn text @click=\"saveCancel\">Cancle </v-btn>\n                    <v-btn text @click=\"save\" :disabled=\"!createFoodForm\"\n                      ><span v-if=\"!loading\">Save</span>\n                      <v-progress-circular\n                        v-else\n                        indeterminate\n                        color=\"primary\"\n                      ></v-progress-circular\n                    ></v-btn>\n                  </v-card-actions>\n                  <v-alert class=\"mt-3\" v-show=\"errorAlert\" dense type=\"error\">\n                    Create Food Failed!\n                  </v-alert>\n                </v-card>\n                <!-- Error Alert For Category -->\n              </v-form></template\n            >\n          </v-dialog>\n        </v-toolbar>\n      </template>\n      <template v-slot:[`item.actions`]=\"{ item }\">\n        <v-icon color=\"blue\" dark class=\"mr-2\" @click=\"editItem(item)\">\n          mdi-pencil\n        </v-icon>\n        <v-icon color=\"red\" dark @click=\"deleteItem(item)\"> mdi-delete </v-icon>\n      </template>\n    </v-data-table>\n    <v-toolbar>\n      <!-- -------------****** update dialog ******-------------------------- -->\n      <v-dialog v-model=\"update_dialog\" max-width=\"400px\">\n        <v-card>\n          <v-card-title>\n            <span class=\"text-h4\">Edit Food</span>\n          </v-card-title>\n          <v-card-text>\n            <v-container>\n              <v-row>\n                <v-col cols=\"12\" sm=\"6\" md=\"6\">\n                  <v-text-field\n                    v-model=\"updateDemo.foodName\"\n                    :rules=\"[\n                      (v) => !!v || 'Required',\n                      (v) =>\n                        (v && v.length <= 50) ||\n                        'Title must be less than 50 characters',\n                    ]\"\n                    label=\"Food Name\"\n                  ></v-text-field>\n                </v-col>\n                <!-- -------------****** poster start ******-------------------------- -->\n                <v-col cols=\"12\" sm=\"6\">\n                  <v-file-input\n                    v-model=\"updateDemo.poster\"\n                    label=\"Poster\"\n                    show-size\n                    prepend-icon=\"mdi-camera\"\n                    placeholder=\"Choose Poster Image\"\n                    accept=\"image/png, image/jpeg\"\n                    :rules=\"[\n                      (v) => !!v || 'Required',\n                      (v) =>\n                        !v ||\n                        v.size < 10000000 ||\n                        'Image size should be less than 10 MB!',\n                    ]\"\n                    @change=\"onChangePoster\"\n                  ></v-file-input>\n                </v-col>\n              </v-row>\n              <v-row>\n                <!-- Poster is not selected (null) -->\n                <v-img\n                  v-if=\"posterPreviewPath == null\"\n                  :src=\"localDomain + updateDemo.categoryPhoto\"\n                  width=\"200\"\n                  height=\"150\"\n                  contain\n                >\n                </v-img>\n                <!-- Poster is selected (not null) -->\n                <v-img\n                  v-if=\"posterPreviewPath != null\"\n                  :src=\"posterPreviewPath\"\n                  width=\"200\"\n                  height=\"150\"\n                  contain\n                >\n                </v-img>\n              </v-row>\n              <!-- -------------****** poster end ******-------------------------- -->\n            </v-container>\n          </v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn text @click=\"closeUpdate\">Cancel</v-btn>\n            <v-btn text @click=\"updateItemConfirm(updateDemo.foodId)\"\n              >Update</v-btn\n            >\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n      <!-- -------------****** delete ******-------------------------- -->\n      <v-container>\n        <v-dialog v-model=\"delete_dialog\" max-width=\"400px\">\n          <v-card>\n            <v-card-title class=\"text-h6\"\n              >Are you sure you want to delete this?</v-card-title\n            >\n\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn text @click=\"closeDelete\">Cancel</v-btn>\n              <v-btn text @click=\"deleteItemConfirm(deleteDemo.foodId)\"\n                >Delete</v-btn\n              >\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </v-container>\n    </v-toolbar>\n  </div>\n</template>\n\n<script>\nimport utils from \"@/utils/utils\";\nimport AdminSideBar from \"@/components/AdminSideBar.vue\";\nexport default {\n  name: \"CategoryView\",\n  components: {\n    AdminSideBar,\n  },\n  data: () => ({\n    localDomain: utils.constant.localDomain,\n    createFoodForm: false,\n    dialog: false,\n    update_dialog: false,\n    delete_dialog: false,\n    loading: false,\n    errorAlert: false,\n    poster: null,\n    posterPreviewPath: null,\n    deleteDemo: {},\n    updateDemo: {},\n    createDemo: {\n      foodName: \"\",\n      foodCategory: 1,\n      foodPrice: 0,\n      foodPhoto: null,\n      isAvaliable: true,\n    },\n    categoryList: [],\n    foodList: [],\n    headers: [\n      {\n        text: \"No.\",\n        align: \"start\",\n        sortable: false,\n        value: \"foodId\",\n      },\n      { text: \"Name\", value: \"foodName\" },\n      { text: \"Category\", value: \"foodCategory.categoryName\" },\n      { text: \"Price(Ks)\", value: \"foodPrice\" },\n      { text: \"Created Time\", value: \"createdAt\" },\n      { text: \"Modified Time\", value: \"updatedAt\" },\n      { text: \"Actions\", value: \"actions\", sortable: false },\n    ],\n  }),\n\n  async created() {\n    await this.fetchAllCategories();\n    await this.fetchAllFoods();\n  },\n  methods: {\n    // <!-- -------------****** get all category from utils.http ******-------------------------- -->\n    async fetchAllCategories() {\n      const response = await utils.http.get(\"/category/list\");\n      if (response) {\n        const data = await response.json();\n        if (data) this.categoryList = data;\n      }\n    },\n    // <!-- -------------****** get all food from utils.http ******-------------------------- -->\n    async fetchAllFoods() {\n      const response = await utils.http.get(\"/food/list\");\n      if (response) {\n        const data = await response.json();\n        if (data) this.foodList = data;\n      }\n    },\n    // <!-- -------------****** save Category from utils.http ******-------------------------- -->\n\n    async save() {\n      if (this.$refs.createFoodForm.validate()) {\n        this.errorAlert = false;\n        const respPoster = await utils.http.postMedia(\n          \"/admin/file/create\",\n          this.poster,\n          this.poster.type\n        );\n        let respPosterData = null;\n\n        if (respPoster.status === 200) {\n          respPosterData = await respPoster.text();\n          //console.log(this.respPosterData);\n        } else {\n          this.errorAlert = true;\n        }\n        if (respPosterData) {\n          // Create Food utils.http\n          const resp = await utils.http.post(\"/admin/food/create\", {\n            foodName: this.createDemo.foodName,\n            foodPrice: this.createDemo.foodPrice,\n            foodCategory: { foodId: this.createDemo.foodCategory },\n            isAvaliable: this.createDemo.isAvaliable,\n            foodPhoto: respPosterData,\n          });\n          console.log(this.createDemo.foodName);\n          console.log(this.createDemo.foodPrice);\n          console.log(this.createDemo.foodCategory);\n          console.log(this.createDemo.isAvaliable);\n          console.log(respPosterData);\n          if (resp) {\n            await this.fetchAllFoods();\n            this.dialog = false;\n            this.createDemo = {};\n            this.poster = null;\n            this.posterPreviewPath = null;\n          }\n          if (resp && resp.status === 200) {\n            this.$router.push({ path: \"/admin/food\" });\n          }\n        }\n        this.loading = false;\n      }\n    },\n    // <!-- -------------****** update table from utils.http ******-------------------------- -->\n    async updateItemConfirm(id) {\n      this.errorAlert = false;\n      this.loading = true;\n      let foodPhoto = this.updateDemo.foodPhoto;\n      // Step 1 -> Update Poster\n      // Null -> Poster is not selected\n      if (this.updateDemo.poster != null) {\n        // Update Poster utils.http\n        const respPosterData = await utils.http.putMedia(\n          \"/admin/file/update\",\n          this.updateDemo.poster,\n          this.updateDemo.poster.type,\n          this.updateDemo.foodPhoto\n        );\n\n        if (respPosterData && respPosterData.status === 200) {\n          foodPhoto = await respPosterData.text();\n        } else {\n          console.debug(\"Poster Update Failed\");\n        }\n      }\n      const resp = await utils.http.put(\"/admin/food/update/\" + id, {\n        foodName: this.updateDemo.foodName,\n        foodPrice: this.updateDemo.foodPrice,\n        foodCategory: this.updateDemo.foodCategory.categoryName,\n        isAvaliable: this.updateDemo.isAvaliable,\n        foodPhoto: foodPhoto,\n      });\n      if (resp && resp.status === 200) {\n        this.update_dialog = false;\n        await this.fetchAllFoods();\n      } else {\n        this.errorAlert = true;\n      }\n\n      this.loading = false;\n    },\n    // <!-- -------------****** delete table from utils.http ******-------------------------- -->\n    async deleteItemConfirm(id) {\n      const resp = await utils.http.del(\"/admin/food/delete/\" + id);\n      if (resp.status == 200) {\n        await this.fetchAllFoods();\n        this.delete_dialog = false;\n      }\n    },\n\n    // <!-- -------------******  event handelar from dialog ******-------------------------- -->\n    onChangePoster(poster) {\n      this.posterPreviewPath = URL.createObjectURL(poster);\n    },\n    deleteItem(item) {\n      this.delete_dialog = true;\n      this.deleteDemo = item;\n    },\n    editItem(item) {\n      this.update_dialog = true;\n      // Copy Object\n      this.updateDemo = Object.assign({}, item);\n      this.foodName = this.updateDemo.foodName;\n      this.foodPrice = this.updateDemo.foodPrice;\n      this.foodCategory = this.updateDemo.foodCategory.categoryName;\n      this.isAvaliable = this.updateDemo.isAvaliable;\n      this.foodPhoto = this.updateDemo.foodPhoto;\n      this.poster = this.updateDemo.poster;\n      this.posterPreviewPath = this.updateDemo.posterPreviewPath;\n    },\n    closeUpdate() {\n      this.update_dialog = false;\n    },\n    closeDelete() {\n      this.delete_dialog = false;\n    },\n    saveCancel() {\n      this.dialog = false;\n      this.createDemo = {};\n      this.poster = null;\n      this.posterPreviewPath = null;\n    },\n  },\n};\n</script>\n\n<style>\n.v-btn:hover {\n  background-color: brown;\n  color: white !important;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}