{"ast":null,"code":"import constant from \"./constant\";\n//-------------------------------------------get----------------------------------------------\nasync function get(path, body) {\n  try {\n    const resp = await fetch(constant.localDomain + path, {\n      method: \"GET\",\n      body: JSON.stringify(body)\n    });\n    return resp;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n//------------------------------------post----------------------------------------------\nasync function post(path, body) {\n  try {\n    const resp = await fetch(constant.localDomain + path, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    return resp;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n//-------------------------------------------put----------------------------------------------\nasync function put(path, body) {\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  return resp;\n}\n//-------------------------------------------delete----------------------------------------------\nasync function del(path, body) {\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  return resp;\n}\n//-------------------------------------------form put----------------------------------------------\nasync function putFormData(path, body) {\n  const formData = new FormData();\n  for (let key in body) {\n    formData.append(key, body[key]);\n  }\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"PUT\",\n    body: formData\n  });\n  return resp;\n}\n\n//-------------------------------------------form post----------------------------------------------\nasync function postFormData(path, body) {\n  const formData = new FormData();\n  for (let key in body) {\n    formData.append(key, body[key]);\n  }\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"POST\",\n    body: formData\n  });\n  return resp;\n}\n//-------------------------------------------file post----------------------------------------------\nasync function postMedia(path, file, fileType) {\n  let formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"fileType\", fileType);\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"POST\",\n    body: formData\n  });\n  return resp;\n}\n//-------------------------------------------file put----------------------------------------------\nasync function putMedia(path, file, fileType, filePath) {\n  let formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"fileType\", fileType);\n  formData.append(\"filePath\", filePath);\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"PUT\",\n    body: formData\n  });\n  return resp;\n}\nexport default {\n  get,\n  post,\n  put,\n  del,\n  postMedia,\n  putMedia,\n  postFormData,\n  putFormData\n};","map":{"version":3,"names":["constant","get","path","body","resp","fetch","localDomain","method","JSON","stringify","error","console","log","post","headers","put","del","putFormData","formData","FormData","key","append","postFormData","postMedia","file","fileType","putMedia","filePath"],"sources":["/Users/winmon/Desktop/G3-Frontend/src/utils/http.js"],"sourcesContent":["import constant from \"./constant\";\n//-------------------------------------------get----------------------------------------------\nasync function get(path, body) {\n  try {\n    const resp = await fetch(constant.localDomain + path, {\n      method: \"GET\",\n      body: JSON.stringify(body),\n    });\n    return resp;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n//------------------------------------post----------------------------------------------\nasync function post(path, body) {\n  try {\n    const resp = await fetch(constant.localDomain + path, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    });\n    return resp;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n//-------------------------------------------put----------------------------------------------\nasync function put(path, body) {\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n  return resp;\n}\n//-------------------------------------------delete----------------------------------------------\nasync function del(path, body) {\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n  return resp;\n}\n//-------------------------------------------form put----------------------------------------------\nasync function putFormData(path, body) {\n  const formData = new FormData();\n  for (let key in body) {\n    formData.append(key, body[key]);\n  }\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"PUT\",\n    body: formData,\n  });\n  return resp;\n}\n\n//-------------------------------------------form post----------------------------------------------\nasync function postFormData(path, body) {\n  const formData = new FormData();\n  for (let key in body) {\n    formData.append(key, body[key]);\n  }\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"POST\",\n    body: formData,\n  });\n  return resp;\n}\n//-------------------------------------------file post----------------------------------------------\nasync function postMedia(path, file, fileType) {\n  let formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"fileType\", fileType);\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"POST\",\n    body: formData,\n  });\n  return resp;\n}\n//-------------------------------------------file put----------------------------------------------\nasync function putMedia(path, file, fileType, filePath) {\n  let formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"fileType\", fileType);\n  formData.append(\"filePath\", filePath);\n  const resp = await fetch(constant.localDomain + path, {\n    method: \"PUT\",\n    body: formData,\n  });\n  return resp;\n}\n\nexport default {\n  get,\n  post,\n  put,\n  del,\n  postMedia,\n  putMedia,\n  postFormData,\n  putFormData,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}