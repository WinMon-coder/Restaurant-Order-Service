{"ast":null,"code":"import api from \"@/util/api\";\nexport default {\n  data() {\n    return {\n      dialog: false,\n      delete_dialog: false,\n      update_dialog: false,\n      selectDemo: {},\n      userStatus: [\"ACTIVE\", \"REST\"],\n      poster: null,\n      posterPreviewPath: null,\n      headers: [{\n        text: \"ID\",\n        align: \"start\",\n        value: \"userId\"\n      }, {\n        text: \"User Name\",\n        value: \"userName\"\n      }, {\n        text: \"Email \",\n        value: \"userEmail\"\n      }],\n      users: [],\n      updateItem: {\n        userRole: \"\",\n        userStatus: \"\",\n        startJoinDate: \"\",\n        lastJoinDate: \"\"\n      }\n    };\n  },\n  async created() {\n    await this.getAllUsers();\n  },\n  methods: {\n    async getAllUsers() {\n      const response = await api.get(\"user/list\");\n      if (response) {\n        const data = await response.json();\n        this.users = data;\n      } else {\n        console.log(\"sth wrong\");\n      }\n    },\n    deleteItem(item) {\n      this.delete_dialog = true;\n      this.selectDemo = item;\n      // conslole.log(\"DeleteItem\"+this.selectDemo)\n    },\n\n    closeDelete() {\n      this.delete_dialog = false;\n    },\n    async deleteItemConfirm(id) {\n      const resp = await api.remove(\"user/delete/\" + id);\n      if (resp.status == 200) {\n        await this.getAllUsers();\n        console.log(\"deleted...\");\n        this.delete_dialog = false;\n      } else {\n        console.log(\"sth wrong in delete id\");\n      }\n    },\n    editItem(item) {\n      this.update_dialog = true;\n      this.selectDemo = item;\n    },\n    async UpdateConfirm(id) {\n      const resp = await api.update(\"user/update/\" + id, {\n        userId: this.selectDemo.userId,\n        userName: this.updateItem.userName,\n        email: this.updateItem.email,\n        password: this.updateItem.password,\n        userRole: this.updateItem.userRole,\n        userStatus: this.updateItem.userStatus,\n        userPhoto: this.updateItem.userPhoto,\n        phone: this.updateItem.phone,\n        address: this.updateItem.address,\n        startJoinDate: this.updateItem.startJoinDate,\n        lastJoinDate: this.updateItem.lastJoinDate\n      });\n      console.log(resp);\n      if (resp) {\n        await this.getAllUsers();\n        console.log(resp);\n        this.update_dialog = false;\n      }\n    },\n    closeUpdate() {\n      this.update_dialog = false;\n    },\n    saveCancel() {\n      this.dialog = false;\n    },\n    async save() {\n      let respPosterData = null;\n      const respPoster = await api.postMedia(\"/admin/file/create\", this.poster, this.poster.type);\n      if (respPoster.status === 200) {\n        respPosterData = await respPoster.text();\n      }\n      const resp = await api.save(\"user/create\", {\n        userName: this.newItem.userName,\n        email: this.newItem.email,\n        password: this.newItem.password,\n        userRole: this.newItem.userRole,\n        userStatus: this.newItem.userStatus,\n        userPhoto: this.newItem.userPhoto,\n        posterPath: respPosterData,\n        phone: this.newItem.phone,\n        address: this.newItem.address,\n        startJoinDate: this.newItem.startJoinDate,\n        lastJoinDate: this.newItem.lastJoinDate\n      });\n      console.log(resp);\n      if (resp) {\n        await this.getAllUsers();\n        console.log(\"Hello World\");\n        this.dialog = false;\n      }\n    },\n    onChangePoster(poster) {\n      this.posterPreviewPath = URL.createObjectURL(poster);\n    }\n  }\n};","map":{"version":3,"mappings":"AA2GA;AAEA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC,UACA;QACAC;QACAC;QACAC;MACA,GACA;QAAAF;QAAAE;MAAA,GACA;QAAAF;QAAAE;MAAA,EACA;MACAC;MAEAC;QACAC;QACAT;QACAU;QACAC;MACA;IACA;EACA;EAEA;IACA;EACA;EAEAC;IACA;MACA;MACA;QACA;QACA;MACA;QACAC;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;;IAEAC;MACA;IACA;IAEA;MACA;MACA;QACA;QACAF;QACA;MACA;QACAA;MACA;IACA;IAEAG;MACA;MACA;IACA;IAEA;MACA;QACAC;QACAC;QACAC;QACAC;QACAX;QACAT;QACAqB;QACAC;QACAC;QACAb;QACAC;MACA;MAEAE;MACA;QACA;QACAA;QACA;MACA;IACA;IAEAW;MACA;IACA;IAEAC;MACA;IACA;IAEA;MACA;MACA,uCACA,sBACA,aACA,iBACA;MACA;QACAC;MACA;MAEA;QACAR;QACAC;QACAC;QACAX;QACAT;QACAqB;QACAM;QACAL;QACAC;QACAb;QACAC;MACA;MACAE;MACA;QACA;QACAA;QACA;MACA;IACA;IAEAe;MACA;IACA;EACA;AACA","names":["data","dialog","delete_dialog","update_dialog","selectDemo","userStatus","poster","posterPreviewPath","headers","text","align","value","users","updateItem","userRole","startJoinDate","lastJoinDate","methods","console","deleteItem","closeDelete","editItem","userId","userName","email","password","userPhoto","phone","address","closeUpdate","saveCancel","respPosterData","posterPath","onChangePoster"],"sourceRoot":"src/views/admin","sources":["AdminUserView.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Table Title -->\n    <h1>Users Management Table</h1>\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"users\"\n      :items-per-page=\"10\"\n      class=\"elevation-1\"\n    >\n      <!-- Action for Edit and Delete -->\n      <template v-slot:[`item.actions`]=\"{ item }\">\n        <v-icon\n          small\n          class=\"mr-2\"\n          color=\"warning darken-1\"\n          @click=\"editItem(item)\"\n        >\n          mdi-pencil\n        </v-icon>\n        <v-icon small color=\"red\" @click=\"deleteItem(item)\">\n          mdi-delete\n        </v-icon>\n      </template>\n    </v-data-table>\n\n    <!--  Dialog Box for Delete -->\n    <v-dialog v-model=\"delete_dialog\" max-width=\"500px\">\n      <v-card>\n        <v-card-title class=\"text-h5\"\n          >Are you sure you want to delete this item?</v-card-title\n        >\n        <v-card-text>{{ selectDemo.userId }}</v-card-text>\n        <v-card-text>{{ selectDemo.userName }}</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"red\" @click=\"closeDelete\">Cancel</v-btn>\n          <v-btn\n            color=\"blue darken-1\"\n            @click=\"deleteItemConfirm(selectDemo.userId)\"\n            >Delete</v-btn\n          >\n          <v-spacer></v-spacer>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- End Delete Dialog Box -->\n\n    <!-- for Update Dialog Box -->\n\n    <v-dialog v-model=\"update_dialog\" max-width=\"800px\">\n      <v-card>\n        <v-card-title class=\"text-h5\">Here You Can Update!</v-card-title>\n\n        <v-card-text>\n          <v-container>\n            <v-row>\n              <v-col>\n                <v-select\n                  :items=\"userRoles\"\n                  label=\"User Role\"\n                  v-model=\"updateItem.userRoles\"\n                ></v-select>\n              </v-col>\n              <v-col>\n                <v-select\n                  :items=\"userStatus\"\n                  label=\"User Status\"\n                  v-model=\"updateItem.userStatus\"\n                ></v-select>\n              </v-col>\n            </v-row>\n            <v-row>\n              <v-col>\n                <template>\n                  <v-date-picker\n                    v-model=\"updateItem.startJoinDate\"\n                  ></v-date-picker>\n                </template>\n              </v-col>\n              <v-col>\n                <template>\n                  <v-date-picker\n                    v-model=\"updateItem.lastJoinDate\"\n                  ></v-date-picker>\n                </template>\n              </v-col>\n            </v-row>\n          </v-container>\n        </v-card-text>\n        <v-card-actions>\n          <v-btn color=\"red\" @click=\"closeUpdate\">Cancel</v-btn>\n\n          <v-btn color=\"blue darken-1\" @click=\"UpdateConfirm(selectDemo.id)\"\n            >Update</v-btn\n          >\n          <v-spacer></v-spacer>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- End Update Dialog -->\n  </div>\n</template>\n\n<script>\nimport api from \"@/util/api\";\n\nexport default {\n  data() {\n    return {\n      dialog: false,\n      delete_dialog: false,\n      update_dialog: false,\n      selectDemo: {},\n      userStatus: [\"ACTIVE\", \"REST\"],\n      poster: null,\n      posterPreviewPath: null,\n      headers: [\n        {\n          text: \"ID\",\n          align: \"start\",\n          value: \"userId\",\n        },\n        { text: \"User Name\", value: \"userName\" },\n        { text: \"Email \", value: \"userEmail\" },\n      ],\n      users: [],\n\n      updateItem: {\n        userRole: \"\",\n        userStatus: \"\",\n        startJoinDate: \"\",\n        lastJoinDate: \"\",\n      },\n    };\n  },\n\n  async created() {\n    await this.getAllUsers();\n  },\n\n  methods: {\n    async getAllUsers() {\n      const response = await api.get(\"user/list\");\n      if (response) {\n        const data = await response.json();\n        this.users = data;\n      } else {\n        console.log(\"sth wrong\");\n      }\n    },\n\n    deleteItem(item) {\n      this.delete_dialog = true;\n      this.selectDemo = item;\n      // conslole.log(\"DeleteItem\"+this.selectDemo)\n    },\n\n    closeDelete() {\n      this.delete_dialog = false;\n    },\n\n    async deleteItemConfirm(id) {\n      const resp = await api.remove(\"user/delete/\" + id);\n      if (resp.status == 200) {\n        await this.getAllUsers();\n        console.log(\"deleted...\");\n        this.delete_dialog = false;\n      } else {\n        console.log(\"sth wrong in delete id\");\n      }\n    },\n\n    editItem(item) {\n      this.update_dialog = true;\n      this.selectDemo = item;\n    },\n\n    async UpdateConfirm(id) {\n      const resp = await api.update(\"user/update/\" + id, {\n        userId: this.selectDemo.userId,\n        userName: this.updateItem.userName,\n        email: this.updateItem.email,\n        password: this.updateItem.password,\n        userRole: this.updateItem.userRole,\n        userStatus: this.updateItem.userStatus,\n        userPhoto: this.updateItem.userPhoto,\n        phone: this.updateItem.phone,\n        address: this.updateItem.address,\n        startJoinDate: this.updateItem.startJoinDate,\n        lastJoinDate: this.updateItem.lastJoinDate,\n      });\n\n      console.log(resp);\n      if (resp) {\n        await this.getAllUsers();\n        console.log(resp);\n        this.update_dialog = false;\n      }\n    },\n\n    closeUpdate() {\n      this.update_dialog = false;\n    },\n\n    saveCancel() {\n      this.dialog = false;\n    },\n\n    async save() {\n      let respPosterData = null;\n      const respPoster = await api.postMedia(\n        \"/admin/file/create\",\n        this.poster,\n        this.poster.type\n      );\n      if (respPoster.status === 200) {\n        respPosterData = await respPoster.text();\n      }\n\n      const resp = await api.save(\"user/create\", {\n        userName: this.newItem.userName,\n        email: this.newItem.email,\n        password: this.newItem.password,\n        userRole: this.newItem.userRole,\n        userStatus: this.newItem.userStatus,\n        userPhoto: this.newItem.userPhoto,\n        posterPath: respPosterData,\n        phone: this.newItem.phone,\n        address: this.newItem.address,\n        startJoinDate: this.newItem.startJoinDate,\n        lastJoinDate: this.newItem.lastJoinDate,\n      });\n      console.log(resp);\n      if (resp) {\n        await this.getAllUsers();\n        console.log(\"Hello World\");\n        this.dialog = false;\n      }\n    },\n\n    onChangePoster(poster) {\n      this.posterPreviewPath = URL.createObjectURL(poster);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}