{"ast":null,"code":"import swal from \"sweetalert2\";\nwindow.swal = swal;\nimport utils from \"@/utils/utils\";\nimport AdminSideBar from \"@/components/AdminSideBar.vue\";\nexport default {\n  name: \"CategoryView\",\n  components: {\n    AdminSideBar\n  },\n  data: () => ({\n    localDomain: utils.constant.localDomain,\n    createCategoryForm: false,\n    dialog: false,\n    update_dialog: false,\n    delete_dialog: false,\n    loading: false,\n    errorAlert: false,\n    errorAlert2: false,\n    poster: null,\n    posterPreviewPath: null,\n    deleteDemo: {},\n    updateDemo: {},\n    createDemo: {\n      categoryName: \"\",\n      categoryPhoto: null\n    },\n    categoryList: [],\n    headers: [{\n      text: \"ID\",\n      align: \"start\",\n      sortable: false,\n      value: \"categoryId\"\n    }, {\n      text: \"Category\",\n      value: \"categoryName\"\n    }, {\n      text: \"Photo\",\n      value: \"categoryPhoto\",\n      sortable: false\n    }, {\n      text: \"Created Date\",\n      value: \"createdAt\"\n    }, {\n      text: \"Modified Date\",\n      value: \"updatedAt\"\n    }, {\n      text: \"Actions\",\n      value: \"actions\",\n      sortable: false\n    }]\n  }),\n  async created() {\n    await this.fetchAllCategories();\n  },\n  methods: {\n    // <!-- -------------****** get all category from utils.http ******-------------------------- -->\n    async fetchAllCategories() {\n      const response = await utils.http.get(\"/category/list\");\n      if (response) {\n        const data = await response.json();\n        if (data) this.categoryList = data;\n      }\n    },\n    // <!-- -------------****** save Category from utils.http ******-------------------------- -->\n\n    async save() {\n      if (this.$refs.createCategoryForm.validate()) {\n        this.errorAlert = false;\n        let CategoryNameCheckOK = false;\n        const respCategoryNameCheck = await utils.http.get(\"/admin/category/categoryName/\" + this.createDemo.categoryName.trim());\n        if (respCategoryNameCheck && respCategoryNameCheck.status === 200) {\n          const data = await respCategoryNameCheck.json();\n          console.log(data); //Return true (when category is the same name)\n          if (data && data === true) {\n            swal.fire({\n              icon: \"error\",\n              title: \"Sorry...\",\n              text: \"Category name can't be same!\"\n            });\n          }\n          //Return false (when category is the different name)\n          else {\n            this.errorAlert2 = false;\n            CategoryNameCheckOK = true;\n          }\n        } else {\n          this.errorAlert2 = true;\n        }\n        if (CategoryNameCheckOK) {\n          const respPoster = await utils.http.postMedia(\"/admin/file/create\", this.poster, this.poster.type);\n          let respPosterData = null;\n          if (respPoster.status === 200) {\n            respPosterData = await respPoster.text();\n            //console.log(this.respPosterData);\n          } else {\n            this.errorAlert = true;\n          }\n          if (respPosterData) {\n            // Create Category utils.http\n            const resp = await utils.http.post(\"/admin/category/create\", {\n              categoryName: this.createDemo.categoryName,\n              categoryPhoto: respPosterData\n            });\n            if (resp) {\n              await this.fetchAllCategories();\n              this.dialog = false;\n              this.createDemo = {};\n              this.poster = null;\n              this.posterPreviewPath = null;\n            }\n            this.errorAlert2 = false;\n            // if (resp && resp.status === 200) {\n            //   this.$router.push({ path: \"/admin/category\" });\n            // }\n          }\n\n          this.loading = false;\n        }\n      }\n    },\n    // <!-- -------------****** update table from utils.http ******-------------------------- -->\n    async updateItemConfirm(id) {\n      this.errorAlert = false;\n      this.errorAlert2 = false;\n      this.loading = true;\n      let categoryPhoto = this.updateDemo.categoryPhoto;\n      let CategoryNameCheckOK = false;\n      const respCategoryNameCheck = await utils.http.get(\"/admin/category/categoryName/\" + this.createDemo.categoryName.trim());\n      if (respCategoryNameCheck && respCategoryNameCheck.status === 200) {\n        const data = await respCategoryNameCheck.json();\n        console.log(data); //Return true (when category is the same name)\n        if (data && data === true) {\n          this.errorAlert2 = true;\n        }\n        //Return false (when category is the different name)\n        else {\n          this.errorAlert2 = false;\n          CategoryNameCheckOK = true;\n        }\n      } else {\n        this.errorAlert2 = true;\n      }\n      if (CategoryNameCheckOK) {\n        // Step 1 -> Update Poster\n        // Null -> Poster is not selected\n        if (this.updateDemo.poster != null) {\n          // Update Poster utils.http\n          const respPosterData = await utils.http.putMedia(\"/admin/file/update\", this.updateDemo.poster, this.updateDemo.poster.type, this.updateDemo.categoryPhoto);\n          if (respPosterData && respPosterData.status === 200) {\n            categoryPhoto = await respPosterData.text();\n          } else {\n            console.debug(\"Poster Update Failed\");\n          }\n        }\n        const resp = await utils.http.put(\"/admin/category/update/\" + id, {\n          categoryName: this.updateDemo.categoryName,\n          categoryPhoto: categoryPhoto\n        });\n        if (resp && resp.status === 200) {\n          this.update_dialog = false;\n          await this.fetchAllCategories();\n        } else {\n          this.errorAlert = true;\n          this.errorAlert2 = true;\n        }\n        this.loading = false;\n      }\n    },\n    // <!-- -------------****** delete table from utils.http ******-------------------------- -->\n    async deleteItemConfirm(id) {\n      const resp = await utils.http.del(\"/admin/category/delete/\" + id);\n      if (resp.status == 200) {\n        await this.fetchAllCategories();\n        this.delete_dialog = false;\n      }\n    },\n    // <!-- -------------******  event handelar from dialog ******-------------------------- -->\n    onChangePoster(poster) {\n      this.posterPreviewPath = URL.createObjectURL(poster);\n    },\n    deleteItem(item) {\n      this.delete_dialog = true;\n      this.deleteDemo = item;\n    },\n    editItem(item) {\n      this.update_dialog = true;\n      // Copy Object\n      this.updateDemo = Object.assign({}, item);\n      this.categoryName = this.updateDemo.categoryName;\n      this.categoryPhoto = this.updateDemo.categoryPhoto;\n      this.poster = this.updateDemo.poster;\n      this.posterPreviewPath = this.updateDemo.posterPreviewPath;\n    },\n    closeUpdate() {\n      this.update_dialog = false;\n    },\n    closeDelete() {\n      this.delete_dialog = false;\n    },\n    closeCreate() {\n      this.dialog = false;\n    },\n    saveCancel() {\n      this.dialog = false;\n      this.createDemo = {};\n      this.poster = null;\n      this.posterPreviewPath = null;\n    }\n  }\n};","map":{"version":3,"mappings":"AA4PA;AACAA;AACA;AACA;AACA;EACAC;EACAC;IACAC;EACA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;MACAC;MACAC;IACA;IACAC;IACAC,UACA;MACAC;MACAC;MACAC;MACAC;IACA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;MAAAD;IAAA,GACA;MAAAF;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;MAAAD;IAAA;EAEA;EAEA;IACA;EACA;EACAE;IACA;IACA;MACA;MACA;QACA;QACA;MACA;IACA;IACA;;IAEA;MACA;QACA;QAEA;QACA,mDACA,sEACA;QACA;UACA;UACAC;UACA;YACAC;cACAC;cACAC;cACAR;YACA;UACA;UACA;UAAA,KACA;YACA;YACAS;UACA;QACA;UACA;QACA;QACA;UACA,8CACA,sBACA,aACA,iBACA;UACA;UAEA;YACAC;YACA;UACA;YACA;UACA;UACA;YACA;YACA;cACAd;cACAC;YACA;YACA;cACA;cACA;cACA;cACA;cACA;YACA;YACA;YACA;YACA;YACA;UACA;;UACA;QACA;MACA;IACA;IACA;IACA;MACA;MACA;MACA;MACA;MAEA;MACA,mDACA,sEACA;MACA;QACA;QACAQ;QACA;UACA;QACA;QACA;QAAA,KACA;UACA;UACAI;QACA;MACA;QACA;MACA;MACA;QACA;QACA;QACA;UACA;UACA,iDACA,sBACA,wBACA,6BACA,8BACA;UAEA;YACAZ;UACA;YACAQ;UACA;QACA;QACA;UACAT;UACAC;QACA;QACA;UACA;UACA;QACA;UACA;UACA;QACA;QAEA;MACA;IACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;IACA;IAEA;IACAc;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["window","name","components","AdminSideBar","data","localDomain","createCategoryForm","dialog","update_dialog","delete_dialog","loading","errorAlert","errorAlert2","poster","posterPreviewPath","deleteDemo","updateDemo","createDemo","categoryName","categoryPhoto","categoryList","headers","text","align","sortable","value","methods","console","swal","icon","title","CategoryNameCheckOK","respPosterData","onChangePoster","deleteItem","editItem","closeUpdate","closeDelete","closeCreate","saveCancel"],"sourceRoot":"src/views","sources":["AdminCategoryView.vue"],"sourcesContent":["<template>\n  <div>\n    <AdminSideBar />\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"categoryList\"\n      :items-per-page=\"10\"\n      class=\"elevation-1\"\n    >\n      <!-- Poster Img -->\n      <template v-slot:[`item.categoryPhoto`]=\"{ item }\">\n        <v-img\n          :src=\"localDomain + item.categoryPhoto\"\n          width=\"50\"\n          height=\"50\"\n          contain\n        ></v-img>\n      </template>\n      <template v-slot:top>\n        <v-toolbar flat>\n          <v-toolbar-title>Category</v-toolbar-title>\n          <v-divider class=\"mx-4\" inset vertical></v-divider>\n\n          <!-- -------------****** create dialog ******-------------------------- -->\n          <v-dialog v-model=\"dialog\" max-width=\"400px\">\n            <template v-slot:activator=\"{ on, attrs }\">\n              <v-btn\n                color=\"primary\"\n                class=\"mb-2 widthoutupercase white--text\"\n                v-bind=\"attrs\"\n                v-on=\"on\"\n              >\n                Add Category\n              </v-btn>\n            </template>\n            <template\n              ><v-form ref=\"createCategoryForm\" v-model=\"createCategoryForm\">\n                <v-card>\n                  <v-card-title>\n                    <h3>Add New Category</h3>\n                  </v-card-title>\n                  <v-card-text>\n                    <v-container>\n                      <v-row>\n                        <v-col cols=\"12\" sm=\"6\" md=\"6\">\n                          <v-text-field\n                            v-model=\"createDemo.categoryName\"\n                            :rules=\"[\n                              (v) => !!v || 'Required',\n                              (v) =>\n                                (v && v.length <= 50) ||\n                                'Title must be less than 50 characters',\n                            ]\"\n                            label=\"Category Name\"\n                          ></v-text-field>\n                        </v-col>\n                        <v-col cols=\"12\" sm=\"6\">\n                          <!-- Poster -->\n                          <v-file-input\n                            v-model=\"poster\"\n                            label=\"Photo\"\n                            show-size\n                            prepend-icon=\"mdi-camera\"\n                            placeholder=\"Choose Poster Image\"\n                            accept=\"image/png, image/jpeg\"\n                            :rules=\"[\n                              (v) => !!v || 'Required',\n                              (v) =>\n                                !v ||\n                                v.size < 10000000 ||\n                                'Image size should be less than 10 MB!',\n                            ]\"\n                            @change=\"onChangePoster\"\n                          ></v-file-input>\n                        </v-col>\n                      </v-row>\n                      <v-row>\n                        <!-- Poster Preview -->\n                        <v-img\n                          v-if=\"posterPreviewPath != null\"\n                          :src=\"posterPreviewPath\"\n                          width=\"200\"\n                          height=\"150\"\n                          contain\n                        >\n                        </v-img\n                      ></v-row>\n                    </v-container>\n                  </v-card-text>\n                  <v-card-actions>\n                    <v-spacer></v-spacer>\n\n                    <v-btn\n                      class=\"mb-2 widthoutupercase\"\n                      text\n                      @click=\"closeCreate\"\n                      >Cancel\n                    </v-btn>\n                    <v-btn\n                      color=\"primary\"\n                      class=\"mb-2 widthoutupercase white--text\"\n                      @click=\"save\"\n                      :disabled=\"!createCategoryForm\"\n                      ><span v-if=\"!loading\">Save</span>\n                      <v-progress-circular\n                        v-else\n                        indeterminate\n                        color=\"primary\"\n                      ></v-progress-circular\n                    ></v-btn>\n                  </v-card-actions>\n                  <v-alert class=\"mt-3\" v-show=\"errorAlert\" dense type=\"error\">\n                    Create Category Failed!\n                  </v-alert>\n                  <!-- Same Name Error Alert -->\n                  <v-alert class=\"mt-3\" v-show=\"errorAlert2\" dense type=\"error\">\n                    Category name already exists!\n                  </v-alert>\n                </v-card>\n                <!-- Error Alert For Category -->\n              </v-form></template\n            >\n          </v-dialog>\n        </v-toolbar>\n      </template>\n      <template v-slot:[`item.actions`]=\"{ item }\">\n        <v-icon color=\"indigo\" class=\"mr-2\" @click=\"editItem(item)\">\n          mdi-pencil\n        </v-icon>\n        <v-icon color=\"error\" @click=\"deleteItem(item)\"> mdi-delete </v-icon>\n      </template>\n      <template v-slot:[`item.createdAt`]=\"{ item }\">\n        {{ item.createdAt | formatLocalDate }}\n      </template>\n      <template v-slot:[`item.updatedAt`]=\"{ item }\">\n        {{ item.updatedAt | formatLocalDate }}\n      </template>\n    </v-data-table>\n    <v-toolbar>\n      <!-- -------------****** update dialog ******-------------------------- -->\n      <v-dialog v-model=\"update_dialog\" max-width=\"400px\">\n        <v-card>\n          <v-card-title>\n            <h3>Edit Category</h3>\n          </v-card-title>\n          <v-card-text>\n            <v-container>\n              <v-row>\n                <v-col cols=\"12\" sm=\"6\" md=\"6\">\n                  <v-text-field\n                    v-model=\"updateDemo.categoryName\"\n                    :rules=\"[\n                      (v) => !!v || 'Required',\n                      (v) =>\n                        (v && v.length <= 50) ||\n                        'Title must be less than 50 characters',\n                    ]\"\n                    label=\"Category Name\"\n                  ></v-text-field>\n                </v-col>\n                <!-- -------------****** poster start ******-------------------------- -->\n                <v-col cols=\"12\" sm=\"6\">\n                  <v-file-input\n                    v-model=\"updateDemo.poster\"\n                    label=\"Photo\"\n                    show-size\n                    prepend-icon=\"mdi-camera\"\n                    placeholder=\"Choose Poster Image\"\n                    accept=\"image/png, image/jpeg\"\n                    :rules=\"[\n                      (v) => !!v || 'Required',\n                      (v) =>\n                        !v ||\n                        v.size < 10000000 ||\n                        'Image size should be less than 10 MB!',\n                    ]\"\n                    @change=\"onChangePoster\"\n                  ></v-file-input>\n                </v-col>\n              </v-row>\n              <v-row>\n                <!-- Poster is not selected (null) -->\n                <v-img\n                  v-if=\"posterPreviewPath == null\"\n                  :src=\"localDomain + updateDemo.categoryPhoto\"\n                  width=\"200\"\n                  height=\"150\"\n                  contain\n                >\n                </v-img>\n                <!-- Poster is selected (not null) -->\n                <v-img\n                  v-if=\"posterPreviewPath != null\"\n                  :src=\"posterPreviewPath\"\n                  width=\"200\"\n                  height=\"150\"\n                  contain\n                >\n                </v-img>\n              </v-row>\n              <!-- -------------****** poster end ******-------------------------- -->\n            </v-container>\n          </v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn class=\"mb-2 widthoutupercase\" text @click=\"closeUpdate\"\n              >Cancel</v-btn\n            >\n            <v-btn\n              color=\"primary\"\n              class=\"mb-2 widthoutupercase white--text\"\n              @click=\"updateItemConfirm(updateDemo.categoryId)\"\n              >Update</v-btn\n            >\n          </v-card-actions>\n          <v-alert class=\"mt-3\" v-show=\"errorAlert\" dense type=\"error\">\n            Update Category Failed!\n          </v-alert>\n          <!-- Same Name Error Alert -->\n          <v-alert class=\"mt-3\" v-show=\"errorAlert2\" dense type=\"error\">\n            Category name already exists!\n          </v-alert>\n        </v-card>\n      </v-dialog>\n      <!-- -------------****** delete ******-------------------------- -->\n      <v-container>\n        <v-dialog v-model=\"delete_dialog\" max-width=\"400px\">\n          <v-card>\n            <v-card-title\n              ><span>Are you sure you want to delete this?</span></v-card-title\n            >\n\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn class=\"widthoutupercase mb-2\" text @click=\"closeDelete\"\n                >Cancel</v-btn\n              >\n              <v-btn\n                color=\"primary\"\n                class=\"mb-2 widthoutupercase white--text\"\n                @click=\"deleteItemConfirm(deleteDemo.categoryId)\"\n                >Delete</v-btn\n              >\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </v-container>\n    </v-toolbar>\n  </div>\n</template>\n\n<script>\nimport swal from \"sweetalert2\";\nwindow.swal = swal;\nimport utils from \"@/utils/utils\";\nimport AdminSideBar from \"@/components/AdminSideBar.vue\";\nexport default {\n  name: \"CategoryView\",\n  components: {\n    AdminSideBar,\n  },\n  data: () => ({\n    localDomain: utils.constant.localDomain,\n    createCategoryForm: false,\n    dialog: false,\n    update_dialog: false,\n    delete_dialog: false,\n    loading: false,\n    errorAlert: false,\n    errorAlert2: false,\n    poster: null,\n    posterPreviewPath: null,\n    deleteDemo: {},\n    updateDemo: {},\n    createDemo: {\n      categoryName: \"\",\n      categoryPhoto: null,\n    },\n    categoryList: [],\n    headers: [\n      {\n        text: \"ID\",\n        align: \"start\",\n        sortable: false,\n        value: \"categoryId\",\n      },\n      { text: \"Category\", value: \"categoryName\" },\n      { text: \"Photo\", value: \"categoryPhoto\", sortable: false },\n      { text: \"Created Date\", value: \"createdAt\" },\n      { text: \"Modified Date\", value: \"updatedAt\" },\n      { text: \"Actions\", value: \"actions\", sortable: false },\n    ],\n  }),\n\n  async created() {\n    await this.fetchAllCategories();\n  },\n  methods: {\n    // <!-- -------------****** get all category from utils.http ******-------------------------- -->\n    async fetchAllCategories() {\n      const response = await utils.http.get(\"/category/list\");\n      if (response) {\n        const data = await response.json();\n        if (data) this.categoryList = data;\n      }\n    },\n    // <!-- -------------****** save Category from utils.http ******-------------------------- -->\n\n    async save() {\n      if (this.$refs.createCategoryForm.validate()) {\n        this.errorAlert = false;\n\n        let CategoryNameCheckOK = false;\n        const respCategoryNameCheck = await utils.http.get(\n          \"/admin/category/categoryName/\" + this.createDemo.categoryName.trim()\n        );\n        if (respCategoryNameCheck && respCategoryNameCheck.status === 200) {\n          const data = await respCategoryNameCheck.json();\n          console.log(data); //Return true (when category is the same name)\n          if (data && data === true) {\n            swal.fire({\n              icon: \"error\",\n              title: \"Sorry...\",\n              text: \"Category name can't be same!\",\n            });\n          }\n          //Return false (when category is the different name)\n          else {\n            this.errorAlert2 = false;\n            CategoryNameCheckOK = true;\n          }\n        } else {\n          this.errorAlert2 = true;\n        }\n        if (CategoryNameCheckOK) {\n          const respPoster = await utils.http.postMedia(\n            \"/admin/file/create\",\n            this.poster,\n            this.poster.type\n          );\n          let respPosterData = null;\n\n          if (respPoster.status === 200) {\n            respPosterData = await respPoster.text();\n            //console.log(this.respPosterData);\n          } else {\n            this.errorAlert = true;\n          }\n          if (respPosterData) {\n            // Create Category utils.http\n            const resp = await utils.http.post(\"/admin/category/create\", {\n              categoryName: this.createDemo.categoryName,\n              categoryPhoto: respPosterData,\n            });\n            if (resp) {\n              await this.fetchAllCategories();\n              this.dialog = false;\n              this.createDemo = {};\n              this.poster = null;\n              this.posterPreviewPath = null;\n            }\n            this.errorAlert2 = false;\n            // if (resp && resp.status === 200) {\n            //   this.$router.push({ path: \"/admin/category\" });\n            // }\n          }\n          this.loading = false;\n        }\n      }\n    },\n    // <!-- -------------****** update table from utils.http ******-------------------------- -->\n    async updateItemConfirm(id) {\n      this.errorAlert = false;\n      this.errorAlert2 = false;\n      this.loading = true;\n      let categoryPhoto = this.updateDemo.categoryPhoto;\n\n      let CategoryNameCheckOK = false;\n      const respCategoryNameCheck = await utils.http.get(\n        \"/admin/category/categoryName/\" + this.createDemo.categoryName.trim()\n      );\n      if (respCategoryNameCheck && respCategoryNameCheck.status === 200) {\n        const data = await respCategoryNameCheck.json();\n        console.log(data); //Return true (when category is the same name)\n        if (data && data === true) {\n          this.errorAlert2 = true;\n        }\n        //Return false (when category is the different name)\n        else {\n          this.errorAlert2 = false;\n          CategoryNameCheckOK = true;\n        }\n      } else {\n        this.errorAlert2 = true;\n      }\n      if (CategoryNameCheckOK) {\n        // Step 1 -> Update Poster\n        // Null -> Poster is not selected\n        if (this.updateDemo.poster != null) {\n          // Update Poster utils.http\n          const respPosterData = await utils.http.putMedia(\n            \"/admin/file/update\",\n            this.updateDemo.poster,\n            this.updateDemo.poster.type,\n            this.updateDemo.categoryPhoto\n          );\n\n          if (respPosterData && respPosterData.status === 200) {\n            categoryPhoto = await respPosterData.text();\n          } else {\n            console.debug(\"Poster Update Failed\");\n          }\n        }\n        const resp = await utils.http.put(\"/admin/category/update/\" + id, {\n          categoryName: this.updateDemo.categoryName,\n          categoryPhoto: categoryPhoto,\n        });\n        if (resp && resp.status === 200) {\n          this.update_dialog = false;\n          await this.fetchAllCategories();\n        } else {\n          this.errorAlert = true;\n          this.errorAlert2 = true;\n        }\n\n        this.loading = false;\n      }\n    },\n    // <!-- -------------****** delete table from utils.http ******-------------------------- -->\n    async deleteItemConfirm(id) {\n      const resp = await utils.http.del(\"/admin/category/delete/\" + id);\n      if (resp.status == 200) {\n        await this.fetchAllCategories();\n        this.delete_dialog = false;\n      }\n    },\n\n    // <!-- -------------******  event handelar from dialog ******-------------------------- -->\n    onChangePoster(poster) {\n      this.posterPreviewPath = URL.createObjectURL(poster);\n    },\n    deleteItem(item) {\n      this.delete_dialog = true;\n      this.deleteDemo = item;\n    },\n    editItem(item) {\n      this.update_dialog = true;\n      // Copy Object\n      this.updateDemo = Object.assign({}, item);\n      this.categoryName = this.updateDemo.categoryName;\n      this.categoryPhoto = this.updateDemo.categoryPhoto;\n\n      this.poster = this.updateDemo.poster;\n      this.posterPreviewPath = this.updateDemo.posterPreviewPath;\n    },\n    closeUpdate() {\n      this.update_dialog = false;\n    },\n    closeDelete() {\n      this.delete_dialog = false;\n    },\n    closeCreate() {\n      this.dialog = false;\n    },\n    saveCancel() {\n      this.dialog = false;\n      this.createDemo = {};\n      this.poster = null;\n      this.posterPreviewPath = null;\n    },\n  },\n};\n</script>\n\n<style>\n.v-btn:hover {\n  background-color: primary;\n  color: white !important;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}