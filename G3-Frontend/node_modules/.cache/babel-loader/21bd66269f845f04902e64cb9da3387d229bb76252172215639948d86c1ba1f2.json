{"ast":null,"code":"import swal from \"sweetalert2\";\nwindow.swal = swal;\nimport utils from \"@/utils/utils\";\nimport AdminSideBar from \"@/components/AdminSideBar.vue\";\nexport default {\n  components: {\n    AdminSideBar\n  },\n  data: () => ({\n    localDomain: utils.constant.localDomain,\n    createFoodForm: false,\n    dialog: false,\n    update_dialog: false,\n    delete_dialog: false,\n    loading: false,\n    errorAlert: false,\n    poster: null,\n    posterPreviewPath: null,\n    deleteDemo: {},\n    updateDemo: {},\n    createDemo: {\n      foodName: \"\",\n      foodCategory: 1,\n      foodPrice: \"\",\n      foodPhoto: null,\n      isAvaliable: true\n    },\n    categoryList: [],\n    foodList: [],\n    headers: [{\n      text: \"ID\",\n      align: \"start\",\n      sortable: false,\n      value: \"foodId\"\n    }, {\n      text: \"Name\",\n      value: \"foodName\"\n    }, {\n      text: \"Photo\",\n      value: \"foodPhoto\"\n    }, {\n      text: \"Category\",\n      value: \"category\"\n    }, {\n      text: \"Price(Ks)\",\n      value: \"foodPrice\"\n    }, {\n      text: \"Avaliable\",\n      value: \"isAvaliable\"\n    }, {\n      text: \"Created Date\",\n      value: \"createdAt\"\n    }, {\n      text: \"Modified Date\",\n      value: \"updatedAt\"\n    }, {\n      text: \"Actions\",\n      value: \"actions\",\n      sortable: false\n    }]\n  }),\n  async created() {\n    await this.fetchAllCategories();\n    await this.fetchAllFoods();\n  },\n  methods: {\n    getColor(isAvaliable) {\n      if (isAvaliable == false) return \"error\";else return \"success\";\n    },\n    capitalized(name) {\n      const capitalizedFirst = name[0].toUpperCase();\n      const rest = name.slice(1);\n      return capitalizedFirst + rest;\n    },\n    // <!-- -------------****** get all category from utils.http ******-------------------------- -->\n    async fetchAllCategories() {\n      const response = await utils.http.get(\"/category/list\");\n      if (response) {\n        const data = await response.json();\n        if (data) this.categoryList = data;\n      }\n    },\n    // <!-- -------------****** get all food from utils.http ******-------------------------- -->\n    async fetchAllFoods() {\n      const response = await utils.http.get(\"/food/list\");\n      if (response) {\n        const data = await response.json();\n        if (data) this.foodList = data;\n      }\n    },\n    // <!-- -------------****** save Category from utils.http ******-------------------------- -->\n\n    async save() {\n      if (this.$refs.createFoodForm.validate()) {\n        this.errorAlert = false;\n        let FoodNameCheckOK = false;\n        const respFoodNameCheck = await utils.http.get(\"/food/foodName/\" + this.createDemo.foodName.trim());\n\n        // console.log(respFoodNameCheck);\n        if (respFoodNameCheck && respFoodNameCheck.status === 200) {\n          const data = await respFoodNameCheck.json();\n          if (data && data === true) {\n            swal.fire({\n              icon: \"error\",\n              title: \"Sorry...\",\n              text: \"Food name already exists!\"\n            });\n          } else {\n            FoodNameCheckOK = true;\n          }\n        }\n        if (FoodNameCheckOK) {\n          const respPoster = await utils.http.postMedia(\"/admin/file/create\", this.poster, this.poster.type);\n          let respPosterData = null;\n          if (respPoster.status === 200) {\n            respPosterData = await respPoster.text();\n            //console.log(this.respPosterData);\n          } else {\n            this.errorAlert = true;\n          }\n          if (respPosterData) {\n            // Create Food utils.http\n            const resp = await utils.http.post(\"/admin/food/create\", {\n              foodName: this.createDemo.foodName,\n              foodPrice: this.createDemo.foodPrice,\n              foodCategory: {\n                categoryId: this.createDemo.foodCategory\n              },\n              isAvaliable: this.createDemo.isAvaliable,\n              foodPhoto: respPosterData\n            });\n            if (resp) {\n              await this.fetchAllFoods();\n              this.dialog = false;\n              this.createDemo = {};\n              this.poster = null;\n              this.posterPreviewPath = null;\n            }\n          }\n          this.loading = false;\n        }\n      }\n    },\n    // <!-- -------------****** update table from utils.http ******-------------------------- -->\n    async updateItemConfirm(id) {\n      this.errorAlert = false;\n      this.loading = true;\n      let foodPhoto = this.updateDemo.foodPhoto;\n      // Step 1 -> Update Poster\n      // Null -> Poster is not selected\n      if (this.updateDemo.poster != null) {\n        // Update Poster utils.http\n        const respPosterData = await utils.http.putMedia(\"/admin/file/update\", this.updateDemo.poster, this.updateDemo.poster.type, this.updateDemo.foodPhoto);\n        if (respPosterData && respPosterData.status === 200) {\n          foodPhoto = await respPosterData.text();\n        } else {\n          console.debug(\"Poster Update Failed\");\n        }\n      }\n      const resp = await utils.http.put(\"/admin/food/update/\" + id, {\n        foodName: this.updateDemo.foodName,\n        foodPrice: this.updateDemo.foodPrice,\n        foodCategory: this.updateDemo.foodCategory,\n        isAvaliable: this.updateDemo.isAvaliable,\n        foodPhoto: foodPhoto\n      });\n      if (resp && resp.status === 200) {\n        this.update_dialog = false;\n        await this.fetchAllFoods();\n      } else {\n        swal.fire({\n          icon: \"error\",\n          title: \"Sorry...\",\n          text: \"Food cannot update!\"\n        });\n      }\n      this.loading = false;\n    },\n    // <!-- -------------****** delete table from utils.http ******-------------------------- -->\n    async deleteItemConfirm(id) {\n      const resp = await utils.http.del(\"/admin/food/delete/\" + id);\n      if (resp.status == 200) {\n        await this.fetchAllFoods();\n        this.delete_dialog = false;\n      }\n    },\n    // <!-- -------------******  event handelar from dialog ******-------------------------- -->\n    onChangePoster(poster) {\n      this.posterPreviewPath = URL.createObjectURL(poster);\n    },\n    deleteItem(item) {\n      this.delete_dialog = true;\n      this.deleteDemo = item;\n    },\n    editItem(item) {\n      this.update_dialog = true;\n      // Copy Object\n      this.updateDemo = Object.assign({}, item);\n      this.foodName = this.updateDemo.foodName;\n      this.foodPrice = this.updateDemo.foodPrice;\n      this.foodCategory = {\n        categoryId: this.updateDemo.foodCategory\n      };\n      this.isAvaliable = this.updateDemo.isAvaliable;\n      this.foodPhoto = this.updateDemo.foodPhoto;\n      this.poster = this.updateDemo.poster;\n      this.posterPreviewPath = this.updateDemo.posterPreviewPath;\n    },\n    closeUpdate() {\n      this.update_dialog = false;\n    },\n    closeDelete() {\n      this.delete_dialog = false;\n    },\n    saveCancel() {\n      this.dialog = false;\n      this.createDemo = {};\n      this.poster = null;\n      this.posterPreviewPath = null;\n    }\n  }\n};","map":{"version":3,"mappings":"AAiVA;AACAA;AACA;AACA;AACA;EACAC;IACAC;EACA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IACAC;IACAC;IACAC,UACA;MACAC;MACAC;MACAC;MACAC;IACA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;MAAAD;IAAA;EAEA;EAEA;IACA;IACA;EACA;EAEAE;IACAC;MACA,8CACA;IACA;IACAC;MACA;MACA;MAEA;IACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;IACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;IACA;IACA;;IAEA;MACA;QACA;QACA;QAEA,+CACA,oDACA;;QAEA;QACA;UACA;UACA;YACAC;cACAC;cACAC;cACAT;YACA;UACA;YACAU;UACA;QACA;QAEA;UACA,8CACA,sBACA,aACA,iBACA;UACA;UAEA;YACAC;YACA;UACA;YACA;UACA;UACA;YACA;YACA;cACAnB;cACAE;cACAD;gBAAAmB;cAAA;cACAhB;cACAD;YACA;YAEA;cACA;cACA;cACA;cACA;cACA;YACA;UACA;UACA;QACA;MACA;IACA;IACA;IACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA;QACA,iDACA,sBACA,wBACA,6BACA,0BACA;QAEA;UACAA;QACA;UACAkB;QACA;MACA;MACA;QACArB;QACAE;QACAD;QACAG;QACAD;MACA;MAEA;QACA;QACA;MACA;QACAY;UACAC;UACAC;UACAT;QACA;MACA;MAEA;IACA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;IACA;IAEA;IACAc;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;QAAAJ;MAAA;MACA;MACA;MACA;MACA;IACA;IACAK;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["window","components","AdminSideBar","data","localDomain","createFoodForm","dialog","update_dialog","delete_dialog","loading","errorAlert","poster","posterPreviewPath","deleteDemo","updateDemo","createDemo","foodName","foodCategory","foodPrice","foodPhoto","isAvaliable","categoryList","foodList","headers","text","align","sortable","value","methods","getColor","capitalized","swal","icon","title","FoodNameCheckOK","respPosterData","categoryId","console","onChangePoster","deleteItem","editItem","closeUpdate","closeDelete","saveCancel"],"sourceRoot":"src/views","sources":["AdminView.vue"],"sourcesContent":["<template>\n  <div>\n    <AdminSideBar />\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"foodList\"\n      :items-per-page=\"10\"\n      class=\"elevation-1\"\n    >\n      <!-- Poster Img -->\n      <template v-slot:[`item.foodPhoto`]=\"{ item }\">\n        <v-img\n          :src=\"localDomain + item.foodPhoto\"\n          width=\"100\"\n          height=\"100\"\n          contain\n        ></v-img>\n      </template>\n      <template v-slot:top>\n        <v-toolbar flat>\n          <v-toolbar-title>Food</v-toolbar-title>\n          <v-divider class=\"mx-4\" inset vertical></v-divider>\n\n          <!-- -------------****** create dialog ******-------------------------- -->\n          <v-dialog v-model=\"dialog\" max-width=\"450px\">\n            <template v-slot:activator=\"{ on, attrs }\">\n              <v-btn\n                color=\"primary\"\n                class=\"mb-2 widthoutupercase white--text\"\n                v-bind=\"attrs\"\n                v-on=\"on\"\n              >\n                Add Food\n              </v-btn>\n            </template>\n            <template\n              ><v-form ref=\"createFoodForm\" v-model=\"createFoodForm\">\n                <v-card>\n                  <v-card-title>\n                    <h3>Add New Food</h3>\n                  </v-card-title>\n                  <v-card-text>\n                    <v-container>\n                      <v-row>\n                        <v-col cols=\"12\" sm=\"6\" md=\"6\">\n                          <v-text-field\n                            v-model=\"createDemo.foodName\"\n                            :rules=\"[\n                              (v) => !!v || 'Required',\n                              (v) =>\n                                (v && v.length <= 50) ||\n                                'Title must be less than 50 characters',\n                            ]\"\n                            label=\"Food Name\"\n                          ></v-text-field>\n                        </v-col>\n                        <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\n                          <!-- Category -->\n                          <v-select\n                            v-model=\"createDemo.foodCategory\"\n                            :items=\"categoryList\"\n                            item-text=\"categoryName\"\n                            item-value=\"categoryId\"\n                            :rules=\"[(v) => !!v || 'Required']\"\n                            label=\"Category\"\n                            required\n                          >\n                          </v-select>\n                        </v-col>\n                      </v-row>\n\n                      <v-row>\n                        <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\n                          <v-text-field\n                            v-model=\"createDemo.foodPrice\"\n                            type=\"number\"\n                            suffix=\"MMK\"\n                            min=\"1\"\n                            :rules=\"[\n                              (v) => !!v || 'Required',\n                              (v) =>\n                                (v && v > 0) ||\n                                'Price must be greater than 0 MMK',\n                            ]\"\n                            label=\"Price\"\n                            required\n                          ></v-text-field>\n                        </v-col>\n                        <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\n                          <!-- Adult -->\n                          <v-checkbox\n                            v-model=\"createDemo.isAvaliable\"\n                            label=\"Avaliable\"\n                          ></v-checkbox>\n                        </v-col>\n                      </v-row>\n                      <v-row>\n                        <v-col class=\"d-flex\" cols=\"12\" sm=\"12\">\n                          <!-- Poster -->\n                          <v-file-input\n                            v-model=\"poster\"\n                            label=\"Photo\"\n                            show-size\n                            prepend-icon=\"mdi-camera\"\n                            placeholder=\"Choose Poster Image\"\n                            accept=\"image/png, image/jpeg\"\n                            :rules=\"[\n                              (v) => !!v || 'Required',\n                              (v) =>\n                                !v ||\n                                v.size < 10000000 ||\n                                'Image size should be less than 10 MB!',\n                            ]\"\n                            @change=\"onChangePoster\"\n                          ></v-file-input>\n                        </v-col>\n                        <!-- Poster Preview -->\n                        <v-img\n                          v-if=\"posterPreviewPath != null\"\n                          :src=\"posterPreviewPath\"\n                          width=\"200\"\n                          height=\"150\"\n                          contain\n                        >\n                        </v-img\n                      ></v-row>\n                    </v-container>\n                  </v-card-text>\n                  <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn\n                      class=\"mb-2 widthoutupercase\"\n                      text\n                      @click=\"saveCancel\"\n                      >Cancel\n                    </v-btn>\n                    <v-btn\n                      color=\"primary\"\n                      class=\"mb-2 widthoutupercase white--text\"\n                      @click=\"save\"\n                      :disabled=\"!createFoodForm\"\n                      ><span v-if=\"!loading\">Save</span>\n                      <v-progress-circular\n                        v-else\n                        indeterminate\n                        color=\"primary\"\n                      ></v-progress-circular\n                    ></v-btn>\n                  </v-card-actions>\n                  <v-alert class=\"mt-3\" v-show=\"errorAlert\" dense type=\"error\">\n                    Create Food Failed!\n                  </v-alert>\n                </v-card>\n                <!-- Error Alert For Category -->\n              </v-form></template\n            >\n          </v-dialog>\n        </v-toolbar>\n      </template>\n      <template v-slot:[`item.foodName`]=\"{ item }\">\n        {{ capitalized(item.foodName) }}\n      </template>\n      <template v-slot:[`item.category`]=\"{ item }\">\n        <h3 class=\"primary--text\">\n          {{ item.foodCategory.categoryName }}\n        </h3>\n      </template>\n      <template v-slot:[`item.isAvaliable`]=\"{ item }\">\n        <span class=\"material-icons\">\n          {{ item.isAvaliable == true ? check_circle : block }}\n        </span>\n      </template>\n      <template v-slot:[`item.createdAt`]=\"{ item }\">\n        {{ item.createdAt | formatLocalDate }}\n      </template>\n      <template v-slot:[`item.updatedAt`]=\"{ item }\">\n        {{ item.updatedAt | formatLocalDate }}\n      </template>\n      <template v-slot:[`item.actions`]=\"{ item }\">\n        <v-icon color=\"indigo\" dark class=\"mr-2\" @click=\"editItem(item)\">\n          mdi-pencil\n        </v-icon>\n        <v-icon color=\"error\" dark @click=\"deleteItem(item)\">\n          mdi-delete\n        </v-icon>\n      </template>\n    </v-data-table>\n    <v-toolbar>\n      <!-- -------------****** update dialog ******-------------------------- -->\n      <v-form ref=\"createFoodForm\" v-model=\"createFoodForm\">\n        <v-dialog v-model=\"update_dialog\" max-width=\"450px\">\n          <v-card>\n            <v-card-title>\n              <h3>Edit Food</h3>\n            </v-card-title>\n            <v-card-text>\n              <v-container>\n                <v-row>\n                  <v-col cols=\"12\" sm=\"6\" md=\"6\">\n                    <v-text-field\n                      v-model=\"updateDemo.foodName\"\n                      :rules=\"[\n                        (v) => !!v || 'Required',\n                        (v) =>\n                          (v && v.length <= 50) ||\n                          'Title must be less than 50 characters',\n                      ]\"\n                      label=\"Food Name\"\n                    ></v-text-field>\n                  </v-col>\n                  <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\n                    <!-- Category -->\n                    <v-select\n                      v-model=\"updateDemo.foodCategory\"\n                      :items=\"categoryList\"\n                      item-text=\"categoryName\"\n                      item-value=\"categoryId\"\n                      :rules=\"[(v) => !!v || 'Required']\"\n                      label=\"Category\"\n                      required\n                    >\n                    </v-select>\n                  </v-col>\n                </v-row>\n\n                <v-row>\n                  <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\n                    <v-text-field\n                      v-model=\"updateDemo.foodPrice\"\n                      type=\"number\"\n                      suffix=\"MMK\"\n                      min=\"1\"\n                      :rules=\"[\n                        (v) => !!v || 'Required',\n                        (v) =>\n                          (v && v > 0) || 'Price must be greater than 0 MMK',\n                      ]\"\n                      label=\"Price\"\n                      required\n                    ></v-text-field>\n                  </v-col>\n                  <v-col class=\"d-flex\" cols=\"12\" sm=\"6\">\n                    <!-- Adult -->\n                    <v-checkbox\n                      v-model=\"updateDemo.isAvaliable\"\n                      label=\"Avaliable\"\n                    ></v-checkbox>\n                  </v-col>\n                </v-row>\n                <!-- -------------****** poster start ******-------------------------- -->\n                <v-row>\n                  <v-col cols=\"12\" sm=\"12\">\n                    <v-file-input\n                      v-model=\"updateDemo.poster\"\n                      label=\"Photo\"\n                      show-size\n                      prepend-icon=\"mdi-camera\"\n                      placeholder=\"Choose Poster Image\"\n                      accept=\"image/png, image/jpeg\"\n                      :rules=\"[\n                        (v) => !!v || 'Required',\n                        (v) =>\n                          !v ||\n                          v.size < 10000000 ||\n                          'Image size should be less than 10 MB!',\n                      ]\"\n                      @change=\"onChangePoster\"\n                    ></v-file-input>\n                  </v-col>\n                </v-row>\n                <!-- -------------****** Photo Preview start ******-------------------------- -->\n                <v-row>\n                  <!-- Poster is not selected (null) -->\n                  <v-img\n                    v-if=\"posterPreviewPath == null\"\n                    :src=\"localDomain + updateDemo.foodPhoto\"\n                    width=\"200\"\n                    height=\"150\"\n                    contain\n                  >\n                  </v-img>\n                  <!-- Poster is selected (not null) -->\n                  <v-img\n                    v-if=\"posterPreviewPath != null\"\n                    :src=\"posterPreviewPath\"\n                    width=\"200\"\n                    height=\"150\"\n                    contain\n                  >\n                  </v-img>\n                </v-row>\n                <!-- -------------****** Photo Preview end ******-------------------------- -->\n              </v-container>\n            </v-card-text>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn class=\"mb-2 widthoutupercase\" text @click=\"closeUpdate\"\n                >Cancel</v-btn\n              >\n              <v-btn\n                color=\"primary\"\n                class=\"mb-2 widthoutupercase white--text\"\n                @click=\"updateItemConfirm(updateDemo.foodId)\"\n                >Update</v-btn\n              >\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </v-form>\n      <!-- -------------****** delete ******-------------------------- -->\n      <v-container>\n        <v-dialog v-model=\"delete_dialog\" max-width=\"400px\">\n          <v-card>\n            <v-card-title\n              ><span>Are you sure you want to delete this?</span></v-card-title\n            >\n\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn class=\"mb-2 widthoutupercase\" text @click=\"closeDelete\"\n                >Cancel</v-btn\n              >\n              <v-btn\n                color=\"primary\"\n                class=\"mb-2 widthoutupercase white--text\"\n                @click=\"deleteItemConfirm(deleteDemo.foodId)\"\n                >Delete</v-btn\n              >\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </v-container>\n    </v-toolbar>\n  </div>\n</template>\n\n<script>\nimport swal from \"sweetalert2\";\nwindow.swal = swal;\nimport utils from \"@/utils/utils\";\nimport AdminSideBar from \"@/components/AdminSideBar.vue\";\nexport default {\n  components: {\n    AdminSideBar,\n  },\n  data: () => ({\n    localDomain: utils.constant.localDomain,\n    createFoodForm: false,\n    dialog: false,\n    update_dialog: false,\n    delete_dialog: false,\n    loading: false,\n    errorAlert: false,\n    poster: null,\n    posterPreviewPath: null,\n    deleteDemo: {},\n    updateDemo: {},\n    createDemo: {\n      foodName: \"\",\n      foodCategory: 1,\n      foodPrice: \"\",\n      foodPhoto: null,\n      isAvaliable: true,\n    },\n    categoryList: [],\n    foodList: [],\n    headers: [\n      {\n        text: \"ID\",\n        align: \"start\",\n        sortable: false,\n        value: \"foodId\",\n      },\n      { text: \"Name\", value: \"foodName\" },\n      { text: \"Photo\", value: \"foodPhoto\" },\n      { text: \"Category\", value: \"category\" },\n      { text: \"Price(Ks)\", value: \"foodPrice\" },\n      { text: \"Avaliable\", value: \"isAvaliable\" },\n      { text: \"Created Date\", value: \"createdAt\" },\n      { text: \"Modified Date\", value: \"updatedAt\" },\n      { text: \"Actions\", value: \"actions\", sortable: false },\n    ],\n  }),\n\n  async created() {\n    await this.fetchAllCategories();\n    await this.fetchAllFoods();\n  },\n\n  methods: {\n    getColor(isAvaliable) {\n      if (isAvaliable == false) return \"error\";\n      else return \"success\";\n    },\n    capitalized(name) {\n      const capitalizedFirst = name[0].toUpperCase();\n      const rest = name.slice(1);\n\n      return capitalizedFirst + rest;\n    },\n    // <!-- -------------****** get all category from utils.http ******-------------------------- -->\n    async fetchAllCategories() {\n      const response = await utils.http.get(\"/category/list\");\n      if (response) {\n        const data = await response.json();\n        if (data) this.categoryList = data;\n      }\n    },\n    // <!-- -------------****** get all food from utils.http ******-------------------------- -->\n    async fetchAllFoods() {\n      const response = await utils.http.get(\"/food/list\");\n      if (response) {\n        const data = await response.json();\n        if (data) this.foodList = data;\n      }\n    },\n    // <!-- -------------****** save Category from utils.http ******-------------------------- -->\n\n    async save() {\n      if (this.$refs.createFoodForm.validate()) {\n        this.errorAlert = false;\n        let FoodNameCheckOK = false;\n\n        const respFoodNameCheck = await utils.http.get(\n          \"/food/foodName/\" + this.createDemo.foodName.trim()\n        );\n\n        // console.log(respFoodNameCheck);\n        if (respFoodNameCheck && respFoodNameCheck.status === 200) {\n          const data = await respFoodNameCheck.json();\n          if (data && data === true) {\n            swal.fire({\n              icon: \"error\",\n              title: \"Sorry...\",\n              text: \"Food name already exists!\",\n            });\n          } else {\n            FoodNameCheckOK = true;\n          }\n        }\n\n        if (FoodNameCheckOK) {\n          const respPoster = await utils.http.postMedia(\n            \"/admin/file/create\",\n            this.poster,\n            this.poster.type\n          );\n          let respPosterData = null;\n\n          if (respPoster.status === 200) {\n            respPosterData = await respPoster.text();\n            //console.log(this.respPosterData);\n          } else {\n            this.errorAlert = true;\n          }\n          if (respPosterData) {\n            // Create Food utils.http\n            const resp = await utils.http.post(\"/admin/food/create\", {\n              foodName: this.createDemo.foodName,\n              foodPrice: this.createDemo.foodPrice,\n              foodCategory: { categoryId: this.createDemo.foodCategory },\n              isAvaliable: this.createDemo.isAvaliable,\n              foodPhoto: respPosterData,\n            });\n\n            if (resp) {\n              await this.fetchAllFoods();\n              this.dialog = false;\n              this.createDemo = {};\n              this.poster = null;\n              this.posterPreviewPath = null;\n            }\n          }\n          this.loading = false;\n        }\n      }\n    },\n    // <!-- -------------****** update table from utils.http ******-------------------------- -->\n    async updateItemConfirm(id) {\n      this.errorAlert = false;\n      this.loading = true;\n      let foodPhoto = this.updateDemo.foodPhoto;\n      // Step 1 -> Update Poster\n      // Null -> Poster is not selected\n      if (this.updateDemo.poster != null) {\n        // Update Poster utils.http\n        const respPosterData = await utils.http.putMedia(\n          \"/admin/file/update\",\n          this.updateDemo.poster,\n          this.updateDemo.poster.type,\n          this.updateDemo.foodPhoto\n        );\n\n        if (respPosterData && respPosterData.status === 200) {\n          foodPhoto = await respPosterData.text();\n        } else {\n          console.debug(\"Poster Update Failed\");\n        }\n      }\n      const resp = await utils.http.put(\"/admin/food/update/\" + id, {\n        foodName: this.updateDemo.foodName,\n        foodPrice: this.updateDemo.foodPrice,\n        foodCategory: this.updateDemo.foodCategory,\n        isAvaliable: this.updateDemo.isAvaliable,\n        foodPhoto: foodPhoto,\n      });\n\n      if (resp && resp.status === 200) {\n        this.update_dialog = false;\n        await this.fetchAllFoods();\n      } else {\n        swal.fire({\n          icon: \"error\",\n          title: \"Sorry...\",\n          text: \"Food cannot update!\",\n        });\n      }\n\n      this.loading = false;\n    },\n    // <!-- -------------****** delete table from utils.http ******-------------------------- -->\n    async deleteItemConfirm(id) {\n      const resp = await utils.http.del(\"/admin/food/delete/\" + id);\n      if (resp.status == 200) {\n        await this.fetchAllFoods();\n        this.delete_dialog = false;\n      }\n    },\n\n    // <!-- -------------******  event handelar from dialog ******-------------------------- -->\n    onChangePoster(poster) {\n      this.posterPreviewPath = URL.createObjectURL(poster);\n    },\n    deleteItem(item) {\n      this.delete_dialog = true;\n      this.deleteDemo = item;\n    },\n    editItem(item) {\n      this.update_dialog = true;\n      // Copy Object\n      this.updateDemo = Object.assign({}, item);\n      this.foodName = this.updateDemo.foodName;\n      this.foodPrice = this.updateDemo.foodPrice;\n      this.foodCategory = { categoryId: this.updateDemo.foodCategory };\n      this.isAvaliable = this.updateDemo.isAvaliable;\n      this.foodPhoto = this.updateDemo.foodPhoto;\n      this.poster = this.updateDemo.poster;\n      this.posterPreviewPath = this.updateDemo.posterPreviewPath;\n    },\n    closeUpdate() {\n      this.update_dialog = false;\n    },\n    closeDelete() {\n      this.delete_dialog = false;\n    },\n    saveCancel() {\n      this.dialog = false;\n      this.createDemo = {};\n      this.poster = null;\n      this.posterPreviewPath = null;\n    },\n  },\n};\n</script>\n\n<style>\n.v-btn:hover {\n  background-color: brown;\n  color: white !important;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}