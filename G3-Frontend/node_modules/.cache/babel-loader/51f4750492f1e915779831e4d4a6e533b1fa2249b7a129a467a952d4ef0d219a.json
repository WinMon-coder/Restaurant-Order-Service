{"ast":null,"code":"const localDomain = \"http://localhost:8080\";\n\n//-------------------------------------------create----------------------------------------------\n\n// path -> /admin\n// body -> {}\n// {\n//   name: \"mgmg\"\n// }\n// {\n//   \"name\": \"mgmg\"\n// }\nasync function post(path, body) {\n  try {\n    const resp = await fetch(localDomain + path, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    return resp;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n//-------------------------------------------delete----------------------------------------------\n\nasync function remove(path, body) {\n  const resp = await fetch(localDomain + path, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  return resp;\n}\n//-------------------------------------------post file----------------------------------------------\n\nasync function postMedia(path, file, fileType) {\n  let formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"fileType\", fileType);\n  const resp = await fetch(localDomain + path, {\n    method: \"POST\",\n    body: formData\n  });\n  return resp;\n}\n//-------------------------------------------update file----------------------------------------------\n\nasync function putMedia(path, file, fileType, filePath) {\n  let formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"fileType\", fileType);\n  formData.append(\"filePath\", filePath);\n  const resp = await fetch(localDomain + path, {\n    method: \"PUT\",\n    body: formData\n  });\n  return resp;\n}\n//-------------------------------------------get----------------------------------------------\n\n// path -> /movie\n// path -> /movie/10\n// path -> /movie?test=name\nasync function get(path, body) {\n  try {\n    const resp = await fetch(localDomain + path, {\n      method: \"GET\",\n      body: JSON.stringify(body)\n    });\n    return resp;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n//-------------------------------------------update----------------------------------------------\n\nasync function update(path, body) {\n  const resp = await fetch(localDomain + path, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  return resp;\n}\n//-------------------------------------------post form----------------------------------------------\n\n// body = {\n//   file: {........}\n//   name: \"mgmg\"\n// }\n// body.file\n// body[\"file\"]\nasync function postFormData(path, body) {\n  const formData = new FormData();\n  for (let key in body) {\n    formData.append(key, body[key]);\n  }\n  const resp = await fetch(localDomain + path, {\n    method: \"POST\",\n    body: formData\n  });\n  return resp;\n}\n//-------------------------------------------update form----------------------------------------------\n\nasync function putFormData(path, body) {\n  const formData = new FormData();\n  for (let key in body) {\n    formData.append(key, body[key]);\n  }\n  const resp = await fetch(localDomain + path, {\n    method: \"PUT\",\n    body: formData\n  });\n  return resp;\n}\nexport default {\n  get,\n  post,\n  remove,\n  update,\n  postMedia,\n  putMedia,\n  postFormData,\n  putFormData\n};","map":{"version":3,"names":["localDomain","post","path","body","resp","fetch","method","headers","JSON","stringify","error","console","log","remove","postMedia","file","fileType","formData","FormData","append","putMedia","filePath","get","update","postFormData","key","putFormData"],"sources":["/Users/winmon/vue-bsCamp/VueHome/orderservice-frontend/src/util/api.js"],"sourcesContent":["const localDomain = \"http://localhost:8080\";\n\n//-------------------------------------------create----------------------------------------------\n\n// path -> /admin\n// body -> {}\n// {\n//   name: \"mgmg\"\n// }\n// {\n//   \"name\": \"mgmg\"\n// }\nasync function post(path, body) {\n  try {\n    const resp = await fetch(localDomain + path, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    });\n    return resp;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n//-------------------------------------------delete----------------------------------------------\n\nasync function remove(path, body) {\n  const resp = await fetch(localDomain + path, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n  return resp;\n}\n//-------------------------------------------post file----------------------------------------------\n\nasync function postMedia(path, file, fileType) {\n  let formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"fileType\", fileType);\n  const resp = await fetch(localDomain + path, {\n    method: \"POST\",\n    body: formData,\n  });\n  return resp;\n}\n//-------------------------------------------update file----------------------------------------------\n\nasync function putMedia(path, file, fileType, filePath) {\n  let formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"fileType\", fileType);\n  formData.append(\"filePath\", filePath);\n  const resp = await fetch(localDomain + path, {\n    method: \"PUT\",\n    body: formData,\n  });\n  return resp;\n}\n//-------------------------------------------get----------------------------------------------\n\n// path -> /movie\n// path -> /movie/10\n// path -> /movie?test=name\nasync function get(path, body) {\n  try {\n    const resp = await fetch(localDomain + path, {\n      method: \"GET\",\n      body: JSON.stringify(body),\n    });\n    return resp;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n//-------------------------------------------update----------------------------------------------\n\nasync function update(path, body) {\n  const resp = await fetch(localDomain + path, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n  return resp;\n}\n//-------------------------------------------post form----------------------------------------------\n\n// body = {\n//   file: {........}\n//   name: \"mgmg\"\n// }\n// body.file\n// body[\"file\"]\nasync function postFormData(path, body) {\n  const formData = new FormData();\n  for (let key in body) {\n    formData.append(key, body[key]);\n  }\n  const resp = await fetch(localDomain + path, {\n    method: \"POST\",\n    body: formData,\n  });\n  return resp;\n}\n//-------------------------------------------update form----------------------------------------------\n\nasync function putFormData(path, body) {\n  const formData = new FormData();\n  for (let key in body) {\n    formData.append(key, body[key]);\n  }\n  const resp = await fetch(localDomain + path, {\n    method: \"PUT\",\n    body: formData,\n  });\n  return resp;\n}\n\nexport default {\n  get,\n  post,\n  remove,\n  update,\n  postMedia,\n  putMedia,\n  postFormData,\n  putFormData,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}